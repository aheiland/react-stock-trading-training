{"version":3,"sources":["StockTrader.js","Trading.js","Portfolio.js","Account.js","Ledger.js","Transaction.js","App.js","serviceWorker.js","index.js"],"names":["StockTrader","props","funds","Number","parseFloat","toFixed","Trading","refCollection","event","firm","preventDefault","this","onBuy","symbol","getPrice","parseInt","value","firms","map","price","key","className","getAmount","onSubmit","handleSubmit","type","max","min","ref","instance","firmItems","React","Component","Portfolio","onSell","stocks","stock","amount","Account","startBalance","balance","PlayerAccount","NPCAccount","dice","Math","floor","random","EmptyAccount","Ledger","transactions","Transaction","what","BuyTransaction","SellTransaction","getRandomInt","App","state","account","ledger","filter","transaction","reduce","carry","current","getWorth","getAmountDiff","getTransactionWorth","getFunds","concat","neededFunds","target","find","sourceSymbol","neededAmount","unsellable","source","fromSymbol","forSymbol","targetHasSufficentMoney","sourceHasSufficentAmount","canBuy","newTransactions","createBuyTransactions","setState","canSell","createSellTransactions","others","oFirm","other","length","calculatePriceForAccountPice","slice","actionResults","action","change","takeARisk","firmBuysOther","firmSellsOther","result","newFirms","changes","sumAmount","soldAmount","exact","activeClassName","to","onClick","advanceDay","path","getStocks","sell","buy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a868cc3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function StockTrader(props) {\n    const funds = Number.parseFloat(props.funds).toFixed(2);\n    return (\n        <section>\n            <h1>Trade Or View Your Portfolio</h1>\n            You may save & load your data<br/>\n            Click on 'End Day' to begin a new day!<br/>\n            <br/>\n            Your funds: ${funds}\n        </section>\n    );\n}","import React from 'react';\n\nexport default class Trading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, firm) {\n        event.preventDefault();\n        this.props.onBuy(firm.symbol, this.props.getPrice(firm), parseInt(this.refCollection[firm.symbol].value));\n    }\n\n    firmItems () {\n        return this.props.firms.map(firm => {\n            const price = Number.parseFloat(this.props.getPrice(firm))\n                .toFixed(2);\n            return (\n                <div key={firm.symbol} className=\"firm\">\n                    <div className=\"firm-head\">\n                        {firm.symbol}\n                        <span className=\"firm-price\">(Price: {price})</span>\n                        <span\n                            className=\"firm-amount\">(Available Amount: {this.props.getAmount(\n                            firm) - 1})</span>\n                    </div>\n                    <form className=\"firm-body\"\n                          onSubmit={event => this.handleSubmit(event, firm)}>\n                        <input type=\"number\"\n                               max={this.props.getAmount(firm) - 1} min=\"0\"\n                               ref={instance => this.refCollection[firm.symbol] = instance}/>\n                        <button>BUY</button>\n                    </form>\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <section className=\"firm-container\">\n                {this.firmItems()}\n            </section>\n        );\n    }\n}","import React from 'react';\n\nexport default class Portfolio extends React.Component{\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, symbol) {\n        event.preventDefault();\n        this.props.onSell(symbol, this.props.getPrice(symbol), parseInt(this.refCollection[symbol].value));\n    }\n\n    firmItems () {\n        return this.props.stocks.map(stock => {\n            let price = Number.parseFloat(this.props.getPrice(stock.symbol)).toFixed(2);\n            return (\n                    <div key={stock.symbol} className=\"firm\">\n                        <div className=\"firm-head\">\n                            {stock.symbol}\n                            <span className=\"firm-price\">(Price: {price})</span>\n                            <span className=\"firm-amount\">(Available Amount: {stock.amount})</span>\n                        </div>\n                        <form className=\"firm-body\" onSubmit={event => this.handleSubmit(event, stock.symbol)}>\n                            <input type=\"number\" max={stock.amount} min=\"0\" ref={instance => this.refCollection[stock.symbol] = instance}/>\n                            <button>Sell</button>\n                        </form>\n                    </div>\n                )\n            }\n        );\n    }\n\n    render() {\n        return (\n            <section>\n                <section className=\"firm-container\">\n                    {this.firmItems()}\n                </section>\n            </section>\n        );\n    }\n}","class Account {\n    constructor(symbol, startBalance, amount = 1) {\n        this.balance = startBalance;\n        this.symbol = symbol;\n        this.amount = amount;\n    }\n}\n\nexport class PlayerAccount extends Account {\n    constructor(symbol, startBalance) {\n        super(symbol, startBalance, 0);\n    }\n}\n\nexport class NPCAccount extends Account{\n    takeARisk() {\n        const dice = getRandomInt(1, 20);\n        let balance = this.balance;\n        if (dice === 1) {\n            balance = balance * 1.25;\n        } else if(dice === 20) {\n            balance = balance * 0.5;\n        } else {\n            const factor = (((dice - 2) / 17) * 0.2) + 0.9;\n            balance = balance * factor;\n        }\n        return new NPCAccount(this.symbol, balance, this.amount);\n    }\n}\n\nexport class EmptyAccount extends Account {\n    constructor() {\n        super('', 0, 0);\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return min + Math.floor(Math.random() * Math.floor(max - min + 1));\n}","export default function Ledger(transactions = []) {\n    this.transactions = transactions;\n}","class Transaction {\n    constructor(symbol, what, price, amount) {\n        this.symbol = symbol;\n        this.what = what;\n        this.price = price;\n        this.amount = amount;\n    }\n\n    getAmountDiff() {\n        return this.amount;\n    }\n\n    getWorth() {\n        return this.price * this.amount;\n    }\n}\n\nexport class BuyTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, amount);\n    }\n}\n\nexport class SellTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, -amount);\n    }\n}\n\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n} from \"react-router-dom\";\nimport StockTrader from \"./StockTrader\";\nimport Trading from './Trading';\nimport Portfolio from './Portfolio';\nimport { PlayerAccount, NPCAccount, EmptyAccount } from \"./Account\";\nimport Ledger from \"./Ledger\"\nimport {BuyTransaction, SellTransaction} from \"./Transaction\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: new PlayerAccount('YOU', 1000),\n      firms: [\n          new NPCAccount('BMW', 10000, 200),\n          new NPCAccount('Apple', 10000, 500),\n          new NPCAccount('Google', 100000, 500),\n          new NPCAccount('Twitter', 5000, 50),\n      ],\n      ledger: new Ledger(),\n    };\n  }\n\n  getFunds(account) {\n    return this.state.ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry + current.getWorth(), account.balance);\n  }\n\n  getTransactionWorth(symbol, account) {\n    return this.state.ledger.transactions\n        .filter(transaction => transaction.what === symbol && transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry - current.getWorth(), 0);\n  }\n\n  getAmount(symbol, account) {\n    return this.state.ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol && transaction.what === symbol)\n        .reduce((carry, current) => carry + current.getAmountDiff(), account.amount);\n  }\n\n  getWorth(account) {\n    return this.state.firms\n        .filter(firm => firm.symbol !== account.symbol)\n        .reduce(\n            (carry, current) => carry + this.getTransactionWorth(current.symbol, account),\n            this.getFunds(account)\n        );\n  }\n\n  getStocks(account) {\n    return this.state.firms.map(firm => {\n      return {symbol: firm.symbol, amount: this.getAmount(firm.symbol, account)};\n    }).filter(stock => stock.amount > 0);\n  }\n\n  sumAmount(account) {\n    return this.state.firms\n        .filter(firm => firm.symbol !== account.symbol)\n        .reduce(\n            (carry, current) => carry + this.getAmount(current.symbol, new EmptyAccount()),\n            this.getAmount(account.symbol, account)\n        );\n  }\n\n  soldAmount(account) {\n    const sold = this.state.firms\n        .concat([this.state.account])\n        .filter(firm => firm.symbol !== account.symbol)\n        .reduce(\n            (carry, current) => carry + this.getAmount(account.symbol, new PlayerAccount(current.symbol, 0, 0)),\n            0\n        );\n    return sold;\n  }\n\n  targetHasSufficentMoney(symbol, neededFunds) {\n    const target = this.state.firms\n        .concat([this.state.account])\n        .find(account => account.symbol === symbol);\n    return this.getFunds(target) >= neededFunds;\n  }\n\n  sourceHasSufficentAmount(symbol, sourceSymbol, neededAmount, unsellable = 1) {\n    const source = this.state.firms\n        .concat([this.state.account])\n        .find(account => account.symbol === sourceSymbol);\n    return this.getAmount(symbol, source) >= ((neededAmount * 1) + unsellable);\n  }\n\n  canBuy(fromSymbol, forSymbol, price, amount) {\n    return this.targetHasSufficentMoney(forSymbol, price * amount) &&\n        this.sourceHasSufficentAmount(fromSymbol, fromSymbol, amount);\n  }\n\n  canSell(target, source, price, amount) {\n    return this.targetHasSufficentMoney(target, price * amount) &&\n        this.sourceHasSufficentAmount(target, source, amount, 0);\n  }\n\n  createBuyTransactions(fromSymbol, forSymbol, price, amount) {\n    const toTransaction = new BuyTransaction(forSymbol, fromSymbol, price, amount);\n    const fromTransaction = new SellTransaction(fromSymbol, fromSymbol, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  createSellTransactions(source, target, price, amount) {\n    const toTransaction = new BuyTransaction(target, target, price, amount);\n    const fromTransaction = new SellTransaction(source, target, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  buy(fromSymbol, forSymbol, price, amount) {\n    if (!this.canBuy(fromSymbol, forSymbol, price, amount)){\n      return;\n    }\n    const newTransactions = this.createBuyTransactions(fromSymbol, forSymbol, price, amount);\n    this.setState({ledger: new Ledger(this.state.ledger.transactions.concat(newTransactions))});\n  }\n\n  sell(source, target, price, amount) {\n    if (!this.canSell(target, source, price, amount)){\n      return;\n    }\n    const newTransactions = this.createSellTransactions(source, target, price, amount);\n    this.setState({ledger: new Ledger(this.state.ledger.transactions.concat(newTransactions))});\n  }\n\n  firmBuysOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canBuy(other.symbol, firm.symbol, price, amount)) {\n        return this.createBuyTransactions(other.symbol, firm.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  firmSellsOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canSell(other.symbol, firm.symbol, price, amount)) {\n        return this.createSellTransactions(firm.symbol, other.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  advanceDay() {\n    const firms = this.state.firms.slice();\n    const firmsAction = firms.map(firm => { return {firm: firm, action: getRandomInt(5)}; });\n    const actionResults = firmsAction.map(action => {\n      switch (action.action) {\n        case 0:\n        case 1:\n        case 2: return {type: 'firm', change: ((firm) => { return firm.takeARisk(); })(action.firm)}\n        case 3: return {type: 'transaction', change: this.firmBuysOther(action.firm, firms)}\n        case 4: return {type: 'transaction', change: this.firmSellsOther(action.firm, firms)}\n      }\n    });\n\n    const newTransactions = actionResults\n        .filter(result => result.type === 'transaction')\n        .reduce(\n            (carry, current) => carry.concat(current.change),\n            []\n        );\n\n    const newFirms = firms\n        .map(firm => {\n          let changes = actionResults\n              .filter(result => result.type === 'firm' && result.change.symbol === firm.symbol);\n          if (changes.length < 1) {\n            return firm;\n          }\n          return changes[0].change;\n        });\n\n    this.setState({\n      ledger: new Ledger(this.state.ledger.transactions.concat(newTransactions)),\n      firms: newFirms,\n    });\n  }\n\n  calculatePriceForAccountPice(account) {\n    return this.getWorth(account) / (this.sumAmount(account) + (2.0 * this.soldAmount(account)));\n  }\n\n  render () {\n    return (\n        <Router>\n          <div>\n            <nav>\n              <ul className=\"menu\">\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/\">Stock Trader</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/portfolio\">Portfolio</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/trading\">Trading</NavLink>\n                </li>\n              </ul>\n              <ul className=\"menu\">\n                <li>\n                  <button onClick={() => this.advanceDay()}>End Day\n                  </button>\n                </li>\n                <li>\n                  Save & Load\n                  <ul className=\"menu menu--sub\">\n                    <li>\n                      <button onClick={() => {\n                      }}>Save\n                      </button>\n                    </li>\n                    <li>\n                      <button onClick={() => {\n                      }}>Load\n                      </button>\n                    </li>\n                  </ul>\n                </li>\n                <li>\n                  $ {Number.parseFloat(this.getFunds(this.state.account)).toFixed(2)}\n                </li>\n              </ul>\n            </nav>\n            <Switch>\n              <Route exact={true} path=\"/\">\n                <StockTrader funds={this.getFunds(this.state.account)}/>\n              </Route>\n              <Route path=\"/portfolio\">\n                <Portfolio\n                    stocks={this.getStocks(this.state.account)}\n                    onSell={(symbol, price, amount) => { this.sell(this.state.account.symbol, symbol, price, amount) }}\n                    getPrice={symbol => { return this.calculatePriceForAccountPice(this.state.firms.find(firm => firm.symbol === symbol));}}/>\n              </Route>\n              <Route path=\"/trading\">\n                <Trading\n                    firms={this.state.firms}\n                    getAmount={account => this.getAmount(account.symbol, account)}\n                    getPrice={account => this.calculatePriceForAccountPice(account)}\n                    onBuy={(symbol, price, amount) => { this.buy(symbol, this.state.account.symbol, price, amount) }}\n                />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n    );\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}