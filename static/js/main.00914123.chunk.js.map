{"version":3,"sources":["StockTrader.js","Trading.js","Portfolio.js","Account.js","Ledger.js","Transaction.js","App.js","serviceWorker.js","index.js"],"names":["StockTrader","props","firm","prices","find","price","symbol","prev","current","index","undefined","colors","firms","map","ind","prevFirm","pFirm","key","x1","y1","calculateValue","x2","y2","style","stroke","strokeWidth","this","history","slice","array","renderCurrent","x","length","y","fill","fontSize","funds","Number","parseFloat","toFixed","xmlns","version","baseProfile","width","height","background","viewBox","renderHistory","renderLabels","React","Component","Trading","refCollection","event","preventDefault","onBuy","getPrice","parseInt","value","className","getAmount","onSubmit","handleSubmit","type","max","min","ref","instance","firmItems","Portfolio","onSell","stocks","stock","amount","Account","startBalance","balance","PlayerAccount","NPCAccount","dice","Math","floor","random","factor","Ledger","transactions","Transaction","what","BuyTransaction","SellTransaction","getRandomInt","App","state","account","calculatePrices","ledger","getFunds","getCurrent","filter","transaction","reduce","carry","getWorth","getAmountDiff","getTransactionWorth","neededFunds","target","concat","sourceSymbol","neededAmount","unsellable","source","fromSymbol","forSymbol","targetHasSufficentMoney","sourceHasSufficentAmount","canBuy","newTransactions","createBuyTransactions","updateTransactions","befor","setState","canSell","createSellTransactions","others","oFirm","other","calculatePriceForAccountPice","actionResults","action","change","takeARisk","firmBuysOther","firmSellsOther","result","newFirms","changes","sign","exact","activeClassName","to","onClick","advanceDay","path","getStocks","sell","buy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAEqBA,E,kDACjB,WAAYC,GAAQ,uCACVA,G,2DAGKC,EAAMC,GACjB,OAAQ,EAAMA,EAAOC,MAAK,SAAAC,GAAK,OAAIA,EAAMC,SAAWJ,EAAKI,UAAQD,Q,oCAGvDE,EAAMC,EAASC,GAAQ,IAAD,OAChC,QAAYC,IAATH,EAAH,CAGA,IAAMI,EAAS,CAAC,UAAW,UAAW,UAAW,WAEjD,OAAOH,EAAQI,MAAMC,KAAI,SAACX,EAAMY,GAC5B,IAAMC,EAAWR,EAAKK,MAAMR,MAAK,SAAAY,GAAK,OAAIA,EAAMV,SAAWJ,EAAKI,UAChE,OACQ,uBAAGW,IAAKR,EAAQP,EAAKI,QACjB,0BAAMY,GAAa,GAART,EAAc,GAAIU,GAAI,EAAKC,eAAeL,EAAUR,EAAKJ,QAAU,IAAKkB,GAAa,GAARZ,EAAaa,GAAI,EAAKF,eAAelB,EAAMM,EAAQL,QAAU,IAC/IoB,MAAO,CAACC,OAAQb,EAAOG,GAAMW,YAAa,c,sCAOnD,IAAD,OAEZ,OAAOC,KAAKzB,MAAM0B,QAAQC,OAAO,KAAKf,KAAI,SAACL,EAASC,EAAOoB,GAAjB,OACtC,uBAAGZ,IAAKR,GACH,EAAKqB,cAAcD,EAAMpB,EAAQ,GAAID,EAASC,S,qCAO3C,IAAD,OACLE,EAAS,CAAC,UAAW,UAAW,UAAW,WAC3CH,EAAUkB,KAAKzB,MAAM0B,QAAQC,OAAO,GAAG,GAC7C,OAAOpB,EAAQI,MAAMC,KAAI,SAACX,EAAMO,GAAP,OACrB,0BAAMsB,EAAgC,GAA5B,EAAK9B,MAAM0B,QAAQK,OAAcC,EAAG,EAAKb,eAAelB,EAAMM,EAAQL,QAAU,IAAK+B,KAAMvB,EAAOF,GAAQ0B,SAAU,IAAKjC,EAAKI,a,+BAK5I,IAAM8B,EAAQC,OAAOC,WAAWZ,KAAKzB,MAAMmC,OAAOG,QAAQ,GAC1D,OACI,iCACI,4DADJ,gCAEiC,6BAFjC,yCAG0C,6BACtC,6BAJJ,gBAKkBH,EACd,yBAAKI,MAAM,6BAA6BC,QAAQ,MAC3CC,YAAY,OAAOnB,MAAO,CAC3BoB,MAAO,OACPC,OAAQ,OACRC,WAAY,WACbC,QAAQ,iBACNpB,KAAKqB,gBACLrB,KAAKsB,qB,GA9DeC,IAAMC,WCA1BC,E,kDACjB,WAAYlD,GAAQ,IAAD,8BACf,cAAMA,IACDmD,cAAgB,GAFN,E,yDAKNC,EAAOnD,GAChBmD,EAAMC,iBACN5B,KAAKzB,MAAMsD,MAAMrD,EAAKI,OAAQoB,KAAKzB,MAAMuD,SAAStD,GAAOuD,SAAS/B,KAAK0B,cAAclD,EAAKI,QAAQoD,U,kCAGxF,IAAD,OACT,OAAOhC,KAAKzB,MAAMW,MAAMC,KAAI,SAAAX,GACxB,IAAMG,EAAQgC,OAAOC,WAAW,EAAKrC,MAAMuD,SAAStD,IAC/CqC,QAAQ,GACb,OACI,yBAAKtB,IAAKf,EAAKI,OAAQqD,UAAU,QAC7B,yBAAKA,UAAU,aACVzD,EAAKI,OACN,0BAAMqD,UAAU,cAAhB,WAAsCtD,EAAtC,KACA,0BACIsD,UAAU,eADd,sBACgD,EAAK1D,MAAM2D,UACvD1D,GAAQ,EAFZ,MAIJ,0BAAMyD,UAAU,YACVE,SAAU,SAAAR,GAAK,OAAI,EAAKS,aAAaT,EAAOnD,KAC9C,2BAAO6D,KAAK,SACLC,IAAK,EAAK/D,MAAM2D,UAAU1D,GAAQ,EAAG+D,IAAI,IACzCC,IAAK,SAAAC,GAAQ,OAAI,EAAKf,cAAclD,EAAKI,QAAU6D,KAC1D,8C,+BAQhB,OACI,6BAASR,UAAU,kBACdjC,KAAK0C,iB,GAvCenB,IAAMC,WCAtBmB,E,kDACjB,WAAYpE,GAAQ,IAAD,8BACf,cAAMA,IACDmD,cAAgB,GAFN,E,yDAKNC,EAAO/C,GAChB+C,EAAMC,iBACN5B,KAAKzB,MAAMqE,OAAOhE,EAAQoB,KAAKzB,MAAMuD,SAASlD,GAASmD,SAAS/B,KAAK0B,cAAc9C,GAAQoD,U,kCAGjF,IAAD,OACT,OAAOhC,KAAKzB,MAAMsE,OAAO1D,KAAI,SAAA2D,GACzB,IAAInE,EAAQgC,OAAOC,WAAW,EAAKrC,MAAMuD,SAASgB,EAAMlE,SAASiC,QAAQ,GACzE,OACQ,yBAAKtB,IAAKuD,EAAMlE,OAAQqD,UAAU,QAC9B,yBAAKA,UAAU,mBACVa,EAAMlE,OACP,0BAAMqD,UAAU,cAAhB,WAAsCtD,EAAtC,KACA,0BAAMsD,UAAU,eAAhB,sBAAkDa,EAAMC,OAAxD,MAEJ,0BAAMd,UAAU,YAAYE,SAAU,SAAAR,GAAK,OAAI,EAAKS,aAAaT,EAAOmB,EAAMlE,UAC1E,2BAAOyD,KAAK,SAASC,IAAKQ,EAAMC,OAAQR,IAAI,IAAIC,IAAK,SAAAC,GAAQ,OAAI,EAAKf,cAAcoB,EAAMlE,QAAU6D,KACpG,+C,+BASpB,OACI,iCACI,6BAASR,UAAU,kBACdjC,KAAK0C,kB,GAnCanB,IAAMC,WCFvCwB,EACF,WAAYpE,EAAQqE,GAA2B,IAAbF,EAAY,uDAAH,EAAG,oBAC1C/C,KAAKkD,QAAUD,EACfjD,KAAKpB,OAASA,EACdoB,KAAK+C,OAASA,GAITI,EAAb,kDACI,WAAYvE,EAAQqE,GAAe,uCACzBrE,EAAQqE,EAAc,GAFpC,UAAmCD,GAMtBI,EAAb,0KAEQ,IAoBcb,EAAKD,EApBbe,GAoBaf,EApBU,IAoBfC,EApBY,GAqBjBe,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMjB,EAAMC,EAAM,KApBvDW,EAAUlD,KAAKkD,QACnB,GAAa,IAATG,EACAH,GAAoBI,KAAKf,IAAIe,KAAKhB,IAAe,KAAVY,EAAkBA,GAAU,IAAK,SACrE,GAAY,KAATG,EACNH,GAAoBI,KAAKf,IAAIe,KAAKhB,IAAe,GAAVY,EAAiBA,GAAU,IAAK,QACpE,CACH,IAAMO,GAAYJ,EAAO,GAAK,GAAM,GAAO,GAC3CH,GAAoBI,KAAKf,IAAIe,KAAKhB,IAAKY,EAAUO,EAAUP,GAAU,GAAI,GAE7E,OAAO,IAAIE,EAAWpD,KAAKpB,OAAQsE,EAASlD,KAAK+C,YAZzD,GAAgCC,GCdjB,SAASU,IAA2B,IAApBC,EAAmB,uDAAJ,GAC1C3D,KAAK2D,aAAeA,E,ICDlBC,E,WACF,WAAYhF,EAAQiF,EAAMlF,EAAOoE,GAAS,oBACtC/C,KAAKpB,OAASA,EACdoB,KAAK6D,KAAOA,EACZ7D,KAAKrB,MAAQA,EACbqB,KAAK+C,OAASA,E,4DAId,OAAO/C,KAAK+C,S,iCAIZ,OAAO/C,KAAKrB,MAAQqB,KAAK+C,W,KAIpBe,EAAb,kDACI,WAAYlF,EAAQiF,EAAMlF,EAAOoE,GAAS,uCAChCnE,EAAQiF,GAAOlF,EAAOoE,GAFpC,UAAoCa,GAMvBG,EAAb,kDACI,WAAYnF,EAAQiF,EAAMlF,EAAOoE,GAAS,uCAChCnE,EAAQiF,GAAOlF,GAAQoE,GAFrC,UAAqCa,G,MCmQrC,SAASI,EAAa1B,GACpB,OAAOgB,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMjB,IAGhC2B,M,kDA7Qb,WAAY1F,GAAQ,IAAD,sBACjB,cAAMA,GACN,IAAMW,EAAQ,CACV,IAAIkE,EAAW,MAAO,IAAO,KAC7B,IAAIA,EAAW,QAAS,IAAO,KAC/B,IAAIA,EAAW,SAAU,IAAQ,KACjC,IAAIA,EAAW,UAAW,IAAM,KANnB,OAQjB,EAAKc,MAAQ,CACXjE,QAAS,CACP,CACEkE,QAAS,IAAIhB,EAAc,MAAO,KAClCjE,MAAOA,EACPT,OAAQ,EAAK2F,gBAAgBlF,GAC7BmF,OAAQ,IAAIX,EAAO,OAdR,E,yDAqBjB,OAAO1D,KAAKkE,MAAMjE,QAAQC,OAAO,GAAG,K,sCAGtBhB,GAAQ,IAAD,OACrB,YAAmBF,IAAfgB,KAAKkE,MACAhF,EAAMC,KAAI,SAAAX,GACf,MAAO,CAACI,OAAQJ,EAAKI,OAAQD,MAAOH,EAAK0E,QAAU1E,EAAKuE,WAGrD7D,EAAMC,KAAI,SAAAX,GACf,MAAO,CAACI,OAAQJ,EAAKI,OAAQD,MAAO,EAAK2F,SAAS9F,GAAQ8E,KAAKhB,IAAI,EAAKJ,UAAU1D,EAAKI,OAAQJ,GAAO,S,+BAIjG2F,GACP,OAAOnE,KAAKuE,aAAaF,OAAOV,aAC3Ba,QAAO,SAAAC,GAAW,OAAIA,EAAY7F,SAAWuF,EAAQvF,UACrD8F,QAAO,SAACC,EAAO7F,GAAR,OAAoB6F,EAAQ7F,EAAQ8F,aAAYT,EAAQjB,W,0CAGlDtE,EAAQuF,GAC1B,OAAOnE,KAAKuE,aAAaF,OAAOV,aAC3Ba,QAAO,SAAAC,GAAW,OAAIA,EAAYZ,OAASjF,GAAU6F,EAAY7F,SAAWuF,EAAQvF,UACpF8F,QAAO,SAACC,EAAO7F,GAAR,OAAoB6F,EAAQ7F,EAAQ8F,aAAY,K,gCAGpDhG,EAAQuF,GAChB,OAAOnE,KAAKuE,aAAaF,OAAOV,aAC3Ba,QAAO,SAAAC,GAAW,OAAIA,EAAY7F,SAAWuF,EAAQvF,QAAU6F,EAAYZ,OAASjF,KACpF8F,QAAO,SAACC,EAAO7F,GAAR,OAAoB6F,EAAQ7F,EAAQ+F,kBAAiBV,EAAQpB,U,+BAGlEoB,GAAU,IAAD,OAChB,OAAOnE,KAAKuE,aAAarF,MACpBsF,QAAO,SAAAhG,GAAI,OAAIA,EAAKI,SAAWuF,EAAQvF,UACvC8F,QACG,SAACC,EAAO7F,GAAR,OAAoB6F,EAAQ,EAAKG,oBAAoBhG,EAAQF,OAAQuF,KACrEnE,KAAKsE,SAASH,M,gCAIdA,GAAU,IAAD,OACjB,OAAOnE,KAAKuE,aAAarF,MAAMC,KAAI,SAAAX,GACjC,MAAO,CAACI,OAAQJ,EAAKI,OAAQmE,OAAQ,EAAKb,UAAU1D,EAAKI,OAAQuF,OAChEK,QAAO,SAAA1B,GAAK,OAAIA,EAAMC,OAAS,O,8CAGZnE,EAAQmG,GAC9B,IAAMC,EAAShF,KAAKuE,aAAarF,MAC5B+F,OAAO,CAACjF,KAAKuE,aAAaJ,UAC1BzF,MAAK,SAAAyF,GAAO,OAAIA,EAAQvF,SAAWA,KACxC,OAAOoB,KAAKsE,SAASU,IAAWD,I,+CAGTnG,EAAQsG,EAAcC,GAA+B,IAAjBC,EAAgB,uDAAH,EAClEC,EAASrF,KAAKuE,aAAarF,MAC5B+F,OAAO,CAACjF,KAAKuE,aAAaJ,UAC1BzF,MAAK,SAAAyF,GAAO,OAAIA,EAAQvF,SAAWsG,KACxC,OAAOlF,KAAKkC,UAAUtD,EAAQyG,IAA4B,EAAfF,EAAoBC,I,6BAG1DE,EAAYC,EAAW5G,EAAOoE,GACnC,OAAO/C,KAAKwF,wBAAwBD,EAAW5G,EAAQoE,IACnD/C,KAAKyF,yBAAyBH,EAAYA,EAAYvC,K,8BAGpDiC,EAAQK,EAAQ1G,EAAOoE,GAC7B,OAAO/C,KAAKwF,wBAAwBR,EAAQrG,EAAQoE,IAChD/C,KAAKyF,yBAAyBT,EAAQK,EAAQtC,EAAQ,K,4CAGtCuC,EAAYC,EAAW5G,EAAOoE,GAGlD,MAAO,CAFe,IAAIe,EAAeyB,EAAWD,EAAY3G,EAAOoE,GAC/C,IAAIgB,EAAgBuB,EAAYA,EAAY3G,EAAOoE,M,6CAItDsC,EAAQL,EAAQrG,EAAOoE,GAG5C,MAAO,CAFe,IAAIe,EAAekB,EAAQA,EAAQrG,EAAOoE,GACxC,IAAIgB,EAAgBsB,EAAQL,EAAQrG,EAAOoE,M,0BAIjEuC,EAAYC,EAAW5G,EAAOoE,GAChC,GAAK/C,KAAK0F,OAAOJ,EAAYC,EAAW5G,EAAOoE,GAA/C,CAGA,IAAM4C,EAAkB3F,KAAK4F,sBAAsBN,EAAYC,EAAW5G,EAAOoE,GACjF/C,KAAK6F,mBAAmBF,M,yCAGPA,GACjB,IAAM7G,EAAUkB,KAAKuE,aACfuB,EAAQ9F,KAAKkE,MAAMjE,QAAQC,MAAM,GAAI,GAC3CpB,EAAQuF,OAAS,IAAIX,EACjB1D,KAAKuE,aAAaF,OAAOV,aAAasB,OAAOU,IACjD,IAAM1F,EAAU6F,EAAMb,OAAO,CAACnG,IAC9BkB,KAAK+F,SAAS,CAAC9F,QAASA,M,2BAGrBoF,EAAQL,EAAQrG,EAAOoE,GAC1B,GAAK/C,KAAKgG,QAAQhB,EAAQK,EAAQ1G,EAAOoE,GAAzC,CAGA,IAAM4C,EAAkB3F,KAAKiG,uBAAuBZ,EAAQL,EAAQrG,EAAOoE,GAC3E/C,KAAK6F,mBAAmBF,M,oCAGZnH,EAAMU,GAAQ,IAAD,OACzB,OAAOA,EAAMC,KAAI,SAAAX,GACf,IAAM0H,EAAShH,EAAMsF,QAAO,SAAA2B,GAAK,OAAIA,EAAMvH,SAAWJ,EAAKI,UACrDwH,EAAQF,EAAOlC,EAAakC,EAAO5F,SACnCyC,EAASiB,EAAa,GACtBrF,EAAQ,EAAK0H,6BAA6BD,GAChD,OAAI,EAAKV,OAAOU,EAAMxH,OAAQJ,EAAKI,OAAQD,EAAOoE,GACzC,EAAK6C,sBAAsBQ,EAAMxH,OAAQJ,EAAKI,OAAQD,EAAOoE,GAE/D,MACN2B,QAAO,SAACC,EAAO7F,GAAR,OAAoB6F,EAAMM,OAAOnG,KAAU,M,qCAGxCN,EAAMU,GAAQ,IAAD,OAC1B,OAAOA,EAAMC,KAAI,SAAAX,GACf,IAAM0H,EAAShH,EAAMsF,QAAO,SAAA2B,GAAK,OAAIA,EAAMvH,SAAWJ,EAAKI,UACrDwH,EAAQF,EAAOlC,EAAakC,EAAO5F,SACnCyC,EAASiB,EAAa,GACtBrF,EAAQ,EAAK0H,6BAA6BD,GAChD,OAAI,EAAKJ,QAAQI,EAAMxH,OAAQJ,EAAKI,OAAQD,EAAOoE,GAC1C,EAAKkD,uBAAuBzH,EAAKI,OAAQwH,EAAMxH,OAAQD,EAAOoE,GAEhE,MACN2B,QAAO,SAACC,EAAO7F,GAAR,OAAoB6F,EAAMM,OAAOnG,KAAU,M,mCAGzC,IAAD,OACLI,EAAQc,KAAKuE,aAAarF,MAAMgB,QAEhCoG,EADcpH,EAAMC,KAAI,SAAAX,GAAU,MAAO,CAACA,KAAMA,EAAM+H,OAAQvC,EAAa,OAC/C7E,KAAI,SAAAoH,GACpC,OAAQA,EAAOA,QACb,KAAK,EACL,KAAK,EACL,KAAK,EAAG,MAAO,CAAClE,KAAM,OAAQmE,QAAUhI,EAAuC+H,EAAO/H,KAA5BA,EAAKiI,cAC/D,KAAK,EAAG,MAAO,CAACpE,KAAM,cAAemE,OAAQ,EAAKE,cAAcH,EAAO/H,KAAMU,IAC7E,KAAK,EAAG,MAAO,CAACmD,KAAM,cAAemE,OAAQ,EAAKG,eAAeJ,EAAO/H,KAAMU,IAFvC,IAACV,KAMtCmH,EAAkBW,EACnB9B,QAAO,SAAAoC,GAAM,MAAoB,gBAAhBA,EAAOvE,QACxBqC,QACG,SAACC,EAAO7F,GAAR,OAAoB6F,EAAMM,OAAOnG,EAAQ0H,UACzC,IAGFK,EAAW3H,EACZC,KAAI,SAAAX,GACH,IAAIsI,EAAUR,EACT9B,QAAO,SAAAoC,GAAM,MAAoB,SAAhBA,EAAOvE,MAAmBuE,EAAOJ,OAAO5H,SAAWJ,EAAKI,UAC9E,OAAIkI,EAAQxG,OAAS,EACZ9B,EAEFsI,EAAQ,GAAGN,UAGxBxG,KAAK+F,SAAS,CAAC9F,QAASD,KAAKkE,MAAMjE,QAAQgF,OAAO,CAAC,CAC/Cd,QAASnE,KAAKuE,aAAaJ,QAC3BE,OAAQ,IAAIX,EAAO1D,KAAKuE,aAAaF,OAAOV,aAAasB,OAAOU,IAChEzG,MAAO2H,EACPpI,OAAQuB,KAAKoE,gBAAgByC,U,mDAKN1C,GAC3B,IAAMxF,EAAQqB,KAAKuE,aAAa9F,OAAOC,MAAK,SAAAC,GAAK,OAAIA,EAAMC,SAAWuF,EAAQvF,UAAQD,MACtF,OAAO2E,KAAKyD,KAAKpI,GAASA,I,+BAGjB,IAAD,OACR,OACI,kBAAC,IAAD,KACE,6BACE,6BACE,wBAAIsD,UAAU,QACZ,4BACE,kBAAC,IAAD,CAAS+E,OAAO,EAAMC,gBAAgB,SAASC,GAAG,KAAlD,iBAEF,4BACE,kBAAC,IAAD,CAASF,OAAO,EAAMC,gBAAgB,SAASC,GAAG,cAAlD,cAEF,4BACE,kBAAC,IAAD,CAASF,OAAO,EAAMC,gBAAgB,SAASC,GAAG,YAAlD,aAGJ,wBAAIjF,UAAU,QACZ,4BACE,4BAAQkF,QAAS,kBAAM,EAAKC,eAA5B,YAGF,0CAEE,wBAAInF,UAAU,kBACZ,4BACE,4BAAQkF,QAAS,cAAjB,SAIF,4BACE,4BAAQA,QAAS,cAAjB,WAMN,iCACKxG,OAAOC,WAAWZ,KAAKsE,SAAStE,KAAKuE,aAAaJ,UAAUtD,QAAQ,MAI7E,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmG,OAAO,EAAMK,KAAK,KACvB,kBAAC,EAAD,CAAa3G,MAAOV,KAAKsE,SAAStE,KAAKuE,aAAaJ,SAAUlE,QAASD,KAAKkE,MAAMjE,WAEpF,kBAAC,IAAD,CAAOoH,KAAK,cACV,kBAAC,EAAD,CACIxE,OAAQ7C,KAAKsH,UAAUtH,KAAKuE,aAAaJ,SACzCvB,OAAQ,SAAChE,EAAQD,EAAOoE,GAAa,EAAKwE,KAAK,EAAKhD,aAAaJ,QAAQvF,OAAQA,EAAQD,EAAOoE,IAChGjB,SAAU,SAAAlD,GAAY,OAAO,EAAKyH,6BAA6B,EAAK9B,aAAarF,MAAMR,MAAK,SAAAF,GAAI,OAAIA,EAAKI,SAAWA,UAE1H,kBAAC,IAAD,CAAOyI,KAAK,YACV,kBAAC,EAAD,CACInI,MAAOc,KAAKuE,aAAarF,MACzBgD,UAAW,SAAAiC,GAAO,OAAI,EAAKjC,UAAUiC,EAAQvF,OAAQuF,IACrDrC,SAAU,SAAAqC,GAAO,OAAI,EAAKkC,6BAA6BlC,IACvDtC,MAAO,SAACjD,EAAQD,EAAOoE,GAAa,EAAKyE,IAAI5I,EAAQ,EAAK2F,aAAaJ,QAAQvF,OAAQD,EAAOoE,c,GAhQhGxB,IAAMC,WCJJiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00914123.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class StockTrader extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    calculateValue(firm, prices) {\n        return -2.0 * prices.find(price => price.symbol === firm.symbol).price;\n    }\n\n    renderCurrent(prev, current, index) {\n        if(prev === undefined) {\n            return ;\n        }\n        const colors = ['#FF0000', '#00FF00', '#00FFFF', '#FF00FF'];\n\n        return current.firms.map((firm, ind) => {\n            const prevFirm = prev.firms.find(pFirm => pFirm.symbol === firm.symbol);\n            return (\n                    <g key={index + firm.symbol}>\n                        <line x1={(index * 10) - 10} y1={this.calculateValue(prevFirm, prev.prices) + 900} x2={(index * 10)} y2={this.calculateValue(firm, current.prices) + 900}\n                              style={{stroke: colors[ind], strokeWidth: \"4\"}}></line>\n                    </g>\n                );\n            }\n        );\n    }\n\n    renderHistory() {\n        const colors = ['#FF0000', '#00FF00', '#00FFFF', '#FF00FF'];\n        return this.props.history.slice(-365).map((current, index, array) => (\n            <g key={index}>\n                {this.renderCurrent(array[index - 1], current, index)}\n                </g>\n            )\n        );\n\n    }\n\n    renderLabels() {\n        const colors = ['#FF0000', '#00FF00', '#00FFFF', '#FF00FF'];\n        const current = this.props.history.slice(-1)[0];\n        return current.firms.map((firm, index) => (\n            <text x={(this.props.history.length * 10)} y={this.calculateValue(firm, current.prices) + 900} fill={colors[index]} fontSize={50}>{firm.symbol}</text>\n        ));\n    }\n\n    render() {\n        const funds = Number.parseFloat(this.props.funds).toFixed(2);\n        return (\n            <section>\n                <h1>Trade Or View Your Portfolio</h1>\n                You may save & load your data<br/>\n                Click on 'End Day' to begin a new day!<br/>\n                <br/>\n                Your funds: ${funds}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"\n                     baseProfile=\"full\" style={{\n                    width: '80vw',\n                    height: '21vw',\n                    background: '#000000'\n                }} viewBox=\"0 0 3650 1000\">\n                    {this.renderHistory()}\n                    {this.renderLabels()}\n                </svg>\n            </section>\n        );\n    }\n}","import React from 'react';\n\nexport default class Trading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, firm) {\n        event.preventDefault();\n        this.props.onBuy(firm.symbol, this.props.getPrice(firm), parseInt(this.refCollection[firm.symbol].value));\n    }\n\n    firmItems () {\n        return this.props.firms.map(firm => {\n            const price = Number.parseFloat(this.props.getPrice(firm))\n                .toFixed(2);\n            return (\n                <div key={firm.symbol} className=\"firm\">\n                    <div className=\"firm-head\">\n                        {firm.symbol}\n                        <span className=\"firm-price\">(Price: {price})</span>\n                        <span\n                            className=\"firm-amount\">(Available Amount: {this.props.getAmount(\n                            firm) - 1})</span>\n                    </div>\n                    <form className=\"firm-body\"\n                          onSubmit={event => this.handleSubmit(event, firm)}>\n                        <input type=\"number\"\n                               max={this.props.getAmount(firm) - 1} min=\"0\"\n                               ref={instance => this.refCollection[firm.symbol] = instance}/>\n                        <button>BUY</button>\n                    </form>\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <section className=\"firm-container\">\n                {this.firmItems()}\n            </section>\n        );\n    }\n}","import React from 'react';\n\nexport default class Portfolio extends React.Component{\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, symbol) {\n        event.preventDefault();\n        this.props.onSell(symbol, this.props.getPrice(symbol), parseInt(this.refCollection[symbol].value));\n    }\n\n    firmItems () {\n        return this.props.stocks.map(stock => {\n            let price = Number.parseFloat(this.props.getPrice(stock.symbol)).toFixed(2);\n            return (\n                    <div key={stock.symbol} className=\"firm\">\n                        <div className=\"firm-head--sell\">\n                            {stock.symbol}\n                            <span className=\"firm-price\">(Price: {price})</span>\n                            <span className=\"firm-amount\">(Available Amount: {stock.amount})</span>\n                        </div>\n                        <form className=\"firm-body\" onSubmit={event => this.handleSubmit(event, stock.symbol)}>\n                            <input type=\"number\" max={stock.amount} min=\"0\" ref={instance => this.refCollection[stock.symbol] = instance}/>\n                            <button>Sell</button>\n                        </form>\n                    </div>\n                )\n            }\n        );\n    }\n\n    render() {\n        return (\n            <section>\n                <section className=\"firm-container\">\n                    {this.firmItems()}\n                </section>\n            </section>\n        );\n    }\n}","class Account {\n    constructor(symbol, startBalance, amount = 1) {\n        this.balance = startBalance;\n        this.symbol = symbol;\n        this.amount = amount;\n    }\n}\n\nexport class PlayerAccount extends Account {\n    constructor(symbol, startBalance) {\n        super(symbol, startBalance, 0);\n    }\n}\n\nexport class NPCAccount extends Account{\n    takeARisk() {\n        const dice = getRandomInt(1, 20);\n        let balance = this.balance;\n        if (dice === 1) {\n            balance = balance + Math.min(Math.max((balance * 1.25) - balance, -20), 20);\n        } else if(dice === 20) {\n            balance = balance + Math.min(Math.max((balance * 0.5) - balance, -10), 10);\n        } else {\n            const factor = (((dice - 2) / 17) * 0.4) + 0.9;\n            balance = balance + Math.min(Math.max((balance * factor) - balance, -5), 5);\n        }\n        return new NPCAccount(this.symbol, balance, this.amount);\n    }\n}\n\nexport class EmptyAccount extends Account {\n    constructor() {\n        super('', 0, 0);\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return min + Math.floor(Math.random() * Math.floor(max - min + 1));\n}","export default function Ledger(transactions = []) {\n    this.transactions = transactions;\n}","class Transaction {\n    constructor(symbol, what, price, amount) {\n        this.symbol = symbol;\n        this.what = what;\n        this.price = price;\n        this.amount = amount;\n    }\n\n    getAmountDiff() {\n        return this.amount;\n    }\n\n    getWorth() {\n        return this.price * this.amount;\n    }\n}\n\nexport class BuyTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, amount);\n    }\n}\n\nexport class SellTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, -amount);\n    }\n}\n\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n} from \"react-router-dom\";\nimport StockTrader from \"./StockTrader\";\nimport Trading from './Trading';\nimport Portfolio from './Portfolio';\nimport { PlayerAccount, NPCAccount, EmptyAccount } from \"./Account\";\nimport Ledger from \"./Ledger\"\nimport {BuyTransaction, SellTransaction} from \"./Transaction\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const firms = [\n        new NPCAccount('BMW', 10000, 200),\n        new NPCAccount('Apple', 10000, 500),\n        new NPCAccount('Google', 100000, 500),\n        new NPCAccount('Twitter', 5000, 50)\n    ];\n    this.state = {\n      history: [\n        {\n          account: new PlayerAccount('YOU', 1000),\n          firms: firms,\n          prices: this.calculatePrices(firms),\n          ledger: new Ledger([]),\n        }\n      ]\n    };\n  }\n\n  getCurrent() {\n    return this.state.history.slice(-1)[0];\n  }\n\n  calculatePrices(firms) {\n    if (this.state === undefined) {\n      return firms.map(firm => {\n        return {symbol: firm.symbol, price: firm.balance / firm.amount};\n      });\n    }\n    return firms.map(firm => {\n      return {symbol: firm.symbol, price: this.getFunds(firm) / Math.max(this.getAmount(firm.symbol, firm), 1)};\n    });\n  }\n\n  getFunds(account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry + current.getWorth(), account.balance);\n  }\n\n  getTransactionWorth(symbol, account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.what === symbol && transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry - current.getWorth(), 0);\n  }\n\n  getAmount(symbol, account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol && transaction.what === symbol)\n        .reduce((carry, current) => carry + current.getAmountDiff(), account.amount);\n  }\n\n  getWorth(account) {\n    return this.getCurrent().firms\n        .filter(firm => firm.symbol !== account.symbol)\n        .reduce(\n            (carry, current) => carry + this.getTransactionWorth(current.symbol, account),\n            this.getFunds(account)\n        );\n  }\n\n  getStocks(account) {\n    return this.getCurrent().firms.map(firm => {\n      return {symbol: firm.symbol, amount: this.getAmount(firm.symbol, account)};\n    }).filter(stock => stock.amount > 0);\n  }\n\n  targetHasSufficentMoney(symbol, neededFunds) {\n    const target = this.getCurrent().firms\n        .concat([this.getCurrent().account])\n        .find(account => account.symbol === symbol);\n    return this.getFunds(target) >= neededFunds;\n  }\n\n  sourceHasSufficentAmount(symbol, sourceSymbol, neededAmount, unsellable = 1) {\n    const source = this.getCurrent().firms\n        .concat([this.getCurrent().account])\n        .find(account => account.symbol === sourceSymbol);\n    return this.getAmount(symbol, source) >= ((neededAmount * 1) + unsellable);\n  }\n\n  canBuy(fromSymbol, forSymbol, price, amount) {\n    return this.targetHasSufficentMoney(forSymbol, price * amount) &&\n        this.sourceHasSufficentAmount(fromSymbol, fromSymbol, amount);\n  }\n\n  canSell(target, source, price, amount) {\n    return this.targetHasSufficentMoney(target, price * amount) &&\n        this.sourceHasSufficentAmount(target, source, amount, 0);\n  }\n\n  createBuyTransactions(fromSymbol, forSymbol, price, amount) {\n    const toTransaction = new BuyTransaction(forSymbol, fromSymbol, price, amount);\n    const fromTransaction = new SellTransaction(fromSymbol, fromSymbol, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  createSellTransactions(source, target, price, amount) {\n    const toTransaction = new BuyTransaction(target, target, price, amount);\n    const fromTransaction = new SellTransaction(source, target, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  buy(fromSymbol, forSymbol, price, amount) {\n    if (!this.canBuy(fromSymbol, forSymbol, price, amount)){\n      return;\n    }\n    const newTransactions = this.createBuyTransactions(fromSymbol, forSymbol, price, amount);\n    this.updateTransactions(newTransactions);\n  }\n\n  updateTransactions(newTransactions) {\n    const current = this.getCurrent();\n    const befor = this.state.history.slice(0, -1);\n    current.ledger = new Ledger(\n        this.getCurrent().ledger.transactions.concat(newTransactions));\n    const history = befor.concat([current]);\n    this.setState({history: history});\n  }\n\n  sell(source, target, price, amount) {\n    if (!this.canSell(target, source, price, amount)){\n      return;\n    }\n    const newTransactions = this.createSellTransactions(source, target, price, amount);\n    this.updateTransactions(newTransactions);\n  }\n\n  firmBuysOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canBuy(other.symbol, firm.symbol, price, amount)) {\n        return this.createBuyTransactions(other.symbol, firm.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  firmSellsOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canSell(other.symbol, firm.symbol, price, amount)) {\n        return this.createSellTransactions(firm.symbol, other.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  advanceDay() {\n    const firms = this.getCurrent().firms.slice();\n    const firmsAction = firms.map(firm => { return {firm: firm, action: getRandomInt(5)}; });\n    const actionResults = firmsAction.map(action => {\n      switch (action.action) {\n        case 0:\n        case 1:\n        case 2: return {type: 'firm', change: ((firm) => { return firm.takeARisk(); })(action.firm)}\n        case 3: return {type: 'transaction', change: this.firmBuysOther(action.firm, firms)}\n        case 4: return {type: 'transaction', change: this.firmSellsOther(action.firm, firms)}\n      }\n    });\n\n    const newTransactions = actionResults\n        .filter(result => result.type === 'transaction')\n        .reduce(\n            (carry, current) => carry.concat(current.change),\n            []\n        );\n\n    const newFirms = firms\n        .map(firm => {\n          let changes = actionResults\n              .filter(result => result.type === 'firm' && result.change.symbol === firm.symbol);\n          if (changes.length < 1) {\n            return firm;\n          }\n          return changes[0].change;\n        });\n\n    this.setState({history: this.state.history.concat([{\n        account: this.getCurrent().account,\n        ledger: new Ledger(this.getCurrent().ledger.transactions.concat(newTransactions)),\n        firms: newFirms,\n        prices: this.calculatePrices(newFirms),\n      }])\n    });\n  }\n\n  calculatePriceForAccountPice(account) {\n    const price = this.getCurrent().prices.find(price => price.symbol === account.symbol).price;\n    return Math.sign(price) * price;\n  }\n\n  render () {\n    return (\n        <Router>\n          <div>\n            <nav>\n              <ul className=\"menu\">\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/\">Stock Trader</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/portfolio\">Portfolio</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/trading\">Trading</NavLink>\n                </li>\n              </ul>\n              <ul className=\"menu\">\n                <li>\n                  <button onClick={() => this.advanceDay()}>End Day\n                  </button>\n                </li>\n                <li>\n                  Save & Load\n                  <ul className=\"menu menu--sub\">\n                    <li>\n                      <button onClick={() => {\n                      }}>Save\n                      </button>\n                    </li>\n                    <li>\n                      <button onClick={() => {\n                      }}>Load\n                      </button>\n                    </li>\n                  </ul>\n                </li>\n                <li>\n                  $ {Number.parseFloat(this.getFunds(this.getCurrent().account)).toFixed(2)}\n                </li>\n              </ul>\n            </nav>\n            <Switch>\n              <Route exact={true} path=\"/\">\n                <StockTrader funds={this.getFunds(this.getCurrent().account)} history={this.state.history}/>\n              </Route>\n              <Route path=\"/portfolio\">\n                <Portfolio\n                    stocks={this.getStocks(this.getCurrent().account)}\n                    onSell={(symbol, price, amount) => { this.sell(this.getCurrent().account.symbol, symbol, price, amount) }}\n                    getPrice={symbol => { return this.calculatePriceForAccountPice(this.getCurrent().firms.find(firm => firm.symbol === symbol));}}/>\n              </Route>\n              <Route path=\"/trading\">\n                <Trading\n                    firms={this.getCurrent().firms}\n                    getAmount={account => this.getAmount(account.symbol, account)}\n                    getPrice={account => this.calculatePriceForAccountPice(account)}\n                    onBuy={(symbol, price, amount) => { this.buy(symbol, this.getCurrent().account.symbol, price, amount) }}\n                />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n    );\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}