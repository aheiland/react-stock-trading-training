{"version":3,"sources":["StockTrader.js","Trading.js","Portfolio.js","Account.js","Ledger.js","Transaction.js","App.js","serviceWorker.js","index.js"],"names":["StockTrader","props","funds","Number","parseFloat","toFixed","Trading","refCollection","event","firm","preventDefault","this","onBuy","symbol","getPrice","parseInt","value","firms","map","price","key","className","getAmount","onSubmit","handleSubmit","type","max","min","ref","instance","firmItems","React","Component","Portfolio","onSell","stocks","stock","amount","Account","startBalance","balance","PlayerAccount","NPCAccount","dice","Math","floor","random","Ledger","transactions","Transaction","what","BuyTransaction","SellTransaction","getRandomInt","App","state","history","account","prices","calculatePrices","ledger","slice","undefined","getFunds","getCurrent","filter","transaction","reduce","carry","current","getWorth","getAmountDiff","getTransactionWorth","neededFunds","target","concat","find","sourceSymbol","neededAmount","unsellable","source","fromSymbol","forSymbol","targetHasSufficentMoney","sourceHasSufficentAmount","canBuy","newTransactions","createBuyTransactions","updateTransactions","befor","setState","canSell","createSellTransactions","others","oFirm","other","length","calculatePriceForAccountPice","actionResults","action","change","takeARisk","firmBuysOther","firmSellsOther","result","newFirms","changes","sign","exact","activeClassName","to","onClick","advanceDay","path","getStocks","sell","buy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f15d8b2e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function StockTrader(props) {\n    const funds = Number.parseFloat(props.funds).toFixed(2);\n    return (\n        <section>\n            <h1>Trade Or View Your Portfolio</h1>\n            You may save & load your data<br/>\n            Click on 'End Day' to begin a new day!<br/>\n            <br/>\n            Your funds: ${funds}\n        </section>\n    );\n}","import React from 'react';\n\nexport default class Trading extends React.Component {\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, firm) {\n        event.preventDefault();\n        this.props.onBuy(firm.symbol, this.props.getPrice(firm), parseInt(this.refCollection[firm.symbol].value));\n    }\n\n    firmItems () {\n        return this.props.firms.map(firm => {\n            const price = Number.parseFloat(this.props.getPrice(firm))\n                .toFixed(2);\n            return (\n                <div key={firm.symbol} className=\"firm\">\n                    <div className=\"firm-head\">\n                        {firm.symbol}\n                        <span className=\"firm-price\">(Price: {price})</span>\n                        <span\n                            className=\"firm-amount\">(Available Amount: {this.props.getAmount(\n                            firm) - 1})</span>\n                    </div>\n                    <form className=\"firm-body\"\n                          onSubmit={event => this.handleSubmit(event, firm)}>\n                        <input type=\"number\"\n                               max={this.props.getAmount(firm) - 1} min=\"0\"\n                               ref={instance => this.refCollection[firm.symbol] = instance}/>\n                        <button>BUY</button>\n                    </form>\n                </div>\n            );\n        });\n    }\n\n    render() {\n        return (\n            <section className=\"firm-container\">\n                {this.firmItems()}\n            </section>\n        );\n    }\n}","import React from 'react';\n\nexport default class Portfolio extends React.Component{\n    constructor(props) {\n        super(props);\n        this.refCollection = [];\n    }\n\n    handleSubmit(event, symbol) {\n        event.preventDefault();\n        this.props.onSell(symbol, this.props.getPrice(symbol), parseInt(this.refCollection[symbol].value));\n    }\n\n    firmItems () {\n        return this.props.stocks.map(stock => {\n            let price = Number.parseFloat(this.props.getPrice(stock.symbol)).toFixed(2);\n            return (\n                    <div key={stock.symbol} className=\"firm\">\n                        <div className=\"firm-head--sell\">\n                            {stock.symbol}\n                            <span className=\"firm-price\">(Price: {price})</span>\n                            <span className=\"firm-amount\">(Available Amount: {stock.amount})</span>\n                        </div>\n                        <form className=\"firm-body\" onSubmit={event => this.handleSubmit(event, stock.symbol)}>\n                            <input type=\"number\" max={stock.amount} min=\"0\" ref={instance => this.refCollection[stock.symbol] = instance}/>\n                            <button>Sell</button>\n                        </form>\n                    </div>\n                )\n            }\n        );\n    }\n\n    render() {\n        return (\n            <section>\n                <section className=\"firm-container\">\n                    {this.firmItems()}\n                </section>\n            </section>\n        );\n    }\n}","class Account {\n    constructor(symbol, startBalance, amount = 1) {\n        this.balance = startBalance;\n        this.symbol = symbol;\n        this.amount = amount;\n    }\n}\n\nexport class PlayerAccount extends Account {\n    constructor(symbol, startBalance) {\n        super(symbol, startBalance, 0);\n    }\n}\n\nexport class NPCAccount extends Account{\n    takeARisk() {\n        const dice = getRandomInt(1, 20);\n        let balance = this.balance;\n        if (dice === 1) {\n            balance = balance * 1.25;\n        } else if(dice === 20) {\n            balance = balance * 0.5;\n        } else {\n            const factor = (((dice - 2) / 17) * 0.2) + 0.9;\n            balance = balance * factor;\n        }\n        return new NPCAccount(this.symbol, balance, this.amount);\n    }\n}\n\nexport class EmptyAccount extends Account {\n    constructor() {\n        super('', 0, 0);\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return min + Math.floor(Math.random() * Math.floor(max - min + 1));\n}","export default function Ledger(transactions = []) {\n    this.transactions = transactions;\n}","class Transaction {\n    constructor(symbol, what, price, amount) {\n        this.symbol = symbol;\n        this.what = what;\n        this.price = price;\n        this.amount = amount;\n    }\n\n    getAmountDiff() {\n        return this.amount;\n    }\n\n    getWorth() {\n        return this.price * this.amount;\n    }\n}\n\nexport class BuyTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, amount);\n    }\n}\n\nexport class SellTransaction extends Transaction {\n    constructor(symbol, what, price, amount) {\n        super(symbol, what, -price, -amount);\n    }\n}\n\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n} from \"react-router-dom\";\nimport StockTrader from \"./StockTrader\";\nimport Trading from './Trading';\nimport Portfolio from './Portfolio';\nimport { PlayerAccount, NPCAccount, EmptyAccount } from \"./Account\";\nimport Ledger from \"./Ledger\"\nimport {BuyTransaction, SellTransaction} from \"./Transaction\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const firms = [\n        new NPCAccount('BMW', 10000, 200),\n        new NPCAccount('Apple', 10000, 500),\n        new NPCAccount('Google', 100000, 500),\n        new NPCAccount('Twitter', 5000, 50)\n    ];\n    this.state = {\n      history: [\n        {\n          account: new PlayerAccount('YOU', 1000),\n          firms: firms,\n          prices: this.calculatePrices(firms),\n          ledger: new Ledger([]),\n        }\n      ]\n    };\n  }\n\n  getCurrent() {\n    return this.state.history.slice(-1)[0];\n  }\n\n  calculatePrices(firms) {\n    if (this.state === undefined) {\n      return firms.map(firm => {\n        return {symbol: firm.symbol, price: firm.balance / firm.amount};\n      });\n    }\n    return firms.map(firm => {\n      return {symbol: firm.symbol, price: this.getFunds(firm) / this.getAmount(firm.symbol, firm)};\n    });\n  }\n\n  getFunds(account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry + current.getWorth(), account.balance);\n  }\n\n  getTransactionWorth(symbol, account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.what === symbol && transaction.symbol === account.symbol)\n        .reduce((carry, current) => carry - current.getWorth(), 0);\n  }\n\n  getAmount(symbol, account) {\n    return this.getCurrent().ledger.transactions\n        .filter(transaction => transaction.symbol === account.symbol && transaction.what === symbol)\n        .reduce((carry, current) => carry + current.getAmountDiff(), account.amount);\n  }\n\n  getWorth(account) {\n    return this.getCurrent().firms\n        .filter(firm => firm.symbol !== account.symbol)\n        .reduce(\n            (carry, current) => carry + this.getTransactionWorth(current.symbol, account),\n            this.getFunds(account)\n        );\n  }\n\n  getStocks(account) {\n    return this.getCurrent().firms.map(firm => {\n      return {symbol: firm.symbol, amount: this.getAmount(firm.symbol, account)};\n    }).filter(stock => stock.amount > 0);\n  }\n\n  targetHasSufficentMoney(symbol, neededFunds) {\n    const target = this.getCurrent().firms\n        .concat([this.getCurrent().account])\n        .find(account => account.symbol === symbol);\n    return this.getFunds(target) >= neededFunds;\n  }\n\n  sourceHasSufficentAmount(symbol, sourceSymbol, neededAmount, unsellable = 1) {\n    const source = this.getCurrent().firms\n        .concat([this.getCurrent().account])\n        .find(account => account.symbol === sourceSymbol);\n    return this.getAmount(symbol, source) >= ((neededAmount * 1) + unsellable);\n  }\n\n  canBuy(fromSymbol, forSymbol, price, amount) {\n    return this.targetHasSufficentMoney(forSymbol, price * amount) &&\n        this.sourceHasSufficentAmount(fromSymbol, fromSymbol, amount);\n  }\n\n  canSell(target, source, price, amount) {\n    return this.targetHasSufficentMoney(target, price * amount) &&\n        this.sourceHasSufficentAmount(target, source, amount, 0);\n  }\n\n  createBuyTransactions(fromSymbol, forSymbol, price, amount) {\n    const toTransaction = new BuyTransaction(forSymbol, fromSymbol, price, amount);\n    const fromTransaction = new SellTransaction(fromSymbol, fromSymbol, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  createSellTransactions(source, target, price, amount) {\n    const toTransaction = new BuyTransaction(target, target, price, amount);\n    const fromTransaction = new SellTransaction(source, target, price, amount);\n    return [toTransaction, fromTransaction]\n  }\n\n  buy(fromSymbol, forSymbol, price, amount) {\n    if (!this.canBuy(fromSymbol, forSymbol, price, amount)){\n      return;\n    }\n    const newTransactions = this.createBuyTransactions(fromSymbol, forSymbol, price, amount);\n    this.updateTransactions(newTransactions);\n  }\n\n  updateTransactions(newTransactions) {\n    const current = this.getCurrent();\n    const befor = this.state.history.slice(0, -1);\n    current.ledger = new Ledger(\n        this.getCurrent().ledger.transactions.concat(newTransactions));\n    const history = befor.concat([current]);\n    this.setState({history: history});\n  }\n\n  sell(source, target, price, amount) {\n    if (!this.canSell(target, source, price, amount)){\n      return;\n    }\n    const newTransactions = this.createSellTransactions(source, target, price, amount);\n    this.updateTransactions(newTransactions);\n  }\n\n  firmBuysOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canBuy(other.symbol, firm.symbol, price, amount)) {\n        return this.createBuyTransactions(other.symbol, firm.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  firmSellsOther(firm, firms) {\n    return firms.map(firm => {\n      const others = firms.filter(oFirm => oFirm.symbol !== firm.symbol);\n      const other = others[getRandomInt(others.length)];\n      const amount = getRandomInt(5);\n      const price = this.calculatePriceForAccountPice(other);\n      if (this.canSell(other.symbol, firm.symbol, price, amount)) {\n        return this.createSellTransactions(firm.symbol, other.symbol, price, amount);\n      }\n      return [];\n    }).reduce((carry, current) => carry.concat(current), []);\n  }\n\n  advanceDay() {\n    const firms = this.getCurrent().firms.slice();\n    const firmsAction = firms.map(firm => { return {firm: firm, action: getRandomInt(5)}; });\n    const actionResults = firmsAction.map(action => {\n      switch (action.action) {\n        case 0:\n        case 1:\n        case 2: return {type: 'firm', change: ((firm) => { return firm.takeARisk(); })(action.firm)}\n        case 3: return {type: 'transaction', change: this.firmBuysOther(action.firm, firms)}\n        case 4: return {type: 'transaction', change: this.firmSellsOther(action.firm, firms)}\n      }\n    });\n\n    const newTransactions = actionResults\n        .filter(result => result.type === 'transaction')\n        .reduce(\n            (carry, current) => carry.concat(current.change),\n            []\n        );\n\n    const newFirms = firms\n        .map(firm => {\n          let changes = actionResults\n              .filter(result => result.type === 'firm' && result.change.symbol === firm.symbol);\n          if (changes.length < 1) {\n            return firm;\n          }\n          return changes[0].change;\n        });\n\n    this.setState({history: this.state.history.concat([{\n        account: this.getCurrent().account,\n        ledger: new Ledger(this.getCurrent().ledger.transactions.concat(newTransactions)),\n        firms: newFirms,\n        prices: this.calculatePrices(newFirms),\n      }])\n    });\n  }\n\n  calculatePriceForAccountPice(account) {\n    const price = this.getCurrent().prices.find(price => price.symbol === account.symbol).price;\n    return Math.sign(price) * price;\n  }\n\n  render () {\n    return (\n        <Router>\n          <div>\n            <nav>\n              <ul className=\"menu\">\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/\">Stock Trader</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/portfolio\">Portfolio</NavLink>\n                </li>\n                <li>\n                  <NavLink exact={true} activeClassName='active' to=\"/trading\">Trading</NavLink>\n                </li>\n              </ul>\n              <ul className=\"menu\">\n                <li>\n                  <button onClick={() => this.advanceDay()}>End Day\n                  </button>\n                </li>\n                <li>\n                  Save & Load\n                  <ul className=\"menu menu--sub\">\n                    <li>\n                      <button onClick={() => {\n                      }}>Save\n                      </button>\n                    </li>\n                    <li>\n                      <button onClick={() => {\n                      }}>Load\n                      </button>\n                    </li>\n                  </ul>\n                </li>\n                <li>\n                  $ {Number.parseFloat(this.getFunds(this.getCurrent().account)).toFixed(2)}\n                </li>\n              </ul>\n            </nav>\n            <Switch>\n              <Route exact={true} path=\"/\">\n                <StockTrader funds={this.getFunds(this.getCurrent().account)}/>\n              </Route>\n              <Route path=\"/portfolio\">\n                <Portfolio\n                    stocks={this.getStocks(this.getCurrent().account)}\n                    onSell={(symbol, price, amount) => { this.sell(this.getCurrent().account.symbol, symbol, price, amount) }}\n                    getPrice={symbol => { return this.calculatePriceForAccountPice(this.getCurrent().firms.find(firm => firm.symbol === symbol));}}/>\n              </Route>\n              <Route path=\"/trading\">\n                <Trading\n                    firms={this.getCurrent().firms}\n                    getAmount={account => this.getAmount(account.symbol, account)}\n                    getPrice={account => this.calculatePriceForAccountPice(account)}\n                    onBuy={(symbol, price, amount) => { this.buy(symbol, this.getCurrent().account.symbol, price, amount) }}\n                />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n    );\n  }\n}\n\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}